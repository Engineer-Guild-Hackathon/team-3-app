/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/v1/auth/start": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve OIDC metadata required to kick off PKCE flow. */
        get: operations["getAuthStartMetadata"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/callback": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Exchange the authorization code for AppJWT + Refresh token pair. */
        get: operations["exchangeAuthCode"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/refresh": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Rotate refresh token and issue a new access/refresh token pair. */
        post: operations["refreshTokens"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve profile information of the authenticated user. */
        get: operations["getCurrentUser"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/chats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List chat sessions for the authenticated user (newest first). */
        get: operations["listChats"];
        put?: never;
        /** Create a new chat session. */
        post: operations["createChat"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/chats/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Delete a chat session and associated messages. */
        delete: operations["deleteChat"];
        options?: never;
        head?: never;
        /** Update metadata of a chat session. */
        patch: operations["renameChat"];
        trace?: never;
    };
    "/api/v1/chats/{id}/messages": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Fetch message history for a chat. */
        get: operations["listChatMessages"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/tag-types": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve all tag categories available to clients. */
        get: operations["listTagTypes"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/tags": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List tags filtered by subject, topic, or tag type. */
        get: operations["listTags"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/chats/{id}/tags": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve tags currently attached to a chat. */
        get: operations["listChatTags"];
        put?: never;
        /** Attach or update a tag on the specified chat. */
        post: operations["upsertChatTag"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/chats/{id}/tags/{tagId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Remove a tag from the specified chat. */
        delete: operations["removeChatTag"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/tag-mastery": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve mastery scores for tags associated with the user. */
        get: operations["listTagMastery"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/tags/{tagId}/mastery": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Update mastery score for a specific tag. */
        post: operations["updateTagMastery"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/chat": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Execute an LLM turn and return the assistant answer. */
        post: operations["runChatCompletion"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/push/register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Register or refresh a device push token. */
        post: operations["registerPushToken"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/iap/verify": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Validate store purchase receipts and synchronize subscription state. */
        post: operations["verifyIapReceipt"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Error: {
            /** @example bad_request */
            code: string;
            /** @example Invalid code verifier. */
            message: string;
        };
        AuthStartMetadata: {
            /** Format: uri */
            authorizationEndpoint: string;
            clientId: string;
            /** Format: uri */
            redirectUri: string;
            /** @example openid profile email */
            scope: string;
            /** @example S256 */
            codeChallengeMethod: string;
        };
        AuthTokens: {
            accessToken: string;
            /**
             * @description Lifetime (seconds) of the issued access token.
             * @example 900
             */
            accessTokenExpiresIn: number;
            refreshToken: string;
            /** Format: date-time */
            refreshTokenExpiresAt: string;
            /** @description Device identifier bound to the refresh token. */
            deviceId: string;
        };
        ProfileSummary: {
            /** Format: uuid */
            id: string;
            /** Format: email */
            email?: string | null;
            displayName?: string | null;
        };
        AuthContext: {
            scopes: string[];
            /** @enum {string} */
            source: "bearer" | "cookie";
            /** @enum {string} */
            tokenType: "access" | "refresh" | "unknown";
            deviceId?: string | null;
        };
        MeResponse: {
            profile: components["schemas"]["ProfileSummary"];
            auth: components["schemas"]["AuthContext"];
        };
        ChatItem: {
            /** Format: uuid */
            id: string;
            title: string;
            /** @enum {string} */
            status: "in_progress" | "ended";
            /** Format: uuid */
            subjectId?: string | null;
            /** Format: uuid */
            topicId?: string | null;
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string;
        };
        ChatListResponse: {
            items: components["schemas"]["ChatItem"][];
            nextCursor?: string | null;
        };
        CreateChatRequest: {
            title?: string;
            /** Format: uuid */
            subjectId?: string;
            /** Format: uuid */
            topicId?: string;
        };
        UpdateChatRequest: {
            title?: string;
            /** @enum {string} */
            status?: "in_progress" | "ended";
            /** Format: uuid */
            subjectId?: string | null;
            /** Format: uuid */
            topicId?: string | null;
        };
        Message: {
            /** Format: uuid */
            id: string;
            /** @enum {string} */
            role: "user" | "assistant" | "system";
            content: string;
            /** Format: date-time */
            createdAt: string;
        };
        MessagesResponse: {
            items: components["schemas"]["Message"][];
        };
        TagType: {
            /** Format: int32 */
            id: number;
            code: string;
            label: string;
        };
        TagTypeListResponse: {
            items: components["schemas"]["TagType"][];
        };
        TagSummary: {
            /** Format: uuid */
            id: string;
            name: string;
            description?: string | null;
            /** Format: uuid */
            subjectId?: string | null;
            /** Format: uuid */
            topicId?: string | null;
            /** Format: int32 */
            tagTypeId: number;
        };
        TagListResponse: {
            items: components["schemas"]["TagSummary"][];
        };
        ChatTag: {
            /** Format: uuid */
            tagId: string;
            name?: string | null;
            /** Format: int32 */
            tagTypeId?: number | null;
            /** @enum {string} */
            assignedBy: "ai" | "user" | "system";
            /** Format: float */
            confidence: number;
            /** Format: date-time */
            createdAt: string;
        };
        ChatTagListResponse: {
            items: components["schemas"]["ChatTag"][];
        };
        ChatTagUpsertRequest: {
            /** Format: uuid */
            tagId: string;
            /**
             * @default ai
             * @enum {string}
             */
            assignedBy: "ai" | "user" | "system";
            /**
             * Format: float
             * @default 0
             */
            confidence: number;
        };
        TagMasteryItem: {
            /** Format: uuid */
            tagId: string;
            /** Format: float */
            masteryScore: number;
            /** Format: date-time */
            lastAssessedAt?: string | null;
        };
        TagMasteryListResponse: {
            items: components["schemas"]["TagMasteryItem"][];
        };
        TagMasteryUpdateRequest: {
            /** Format: float */
            masteryScore: number;
            /** Format: date-time */
            assessedAt?: string;
        };
        ChatMessageInput: {
            /** @enum {string} */
            role: "user" | "assistant" | "system";
            content: string;
        };
        RunChatRequest: {
            /** Format: uuid */
            chatId?: string;
            subject?: string;
            theme?: string;
            description?: string;
            clientSessionId?: string;
            history: components["schemas"]["ChatMessageInput"][];
            tags?: string[];
        };
        ChatResult: {
            answer: string;
            /** @enum {integer} */
            status: -1 | 0 | 1;
        };
        PushRegisterRequest: {
            /** @enum {string} */
            platform: "ios" | "android";
            token: string;
            deviceId?: string;
            model?: string;
            osVersion?: string;
        };
        IapVerifyRequest: {
            /** @enum {string} */
            platform: "ios" | "android";
            /** @description Base64 (iOS) or JSON payload (Play Billing) of the purchase receipt. */
            receipt: string;
            /** @description Device identifier emitting the verification request. */
            deviceId?: string;
        };
        IapVerifyResponse: {
            /** @enum {string} */
            status: "trial" | "active" | "grace" | "paused" | "canceled" | "expired";
            productId: string;
            /** Format: date-time */
            expiresAt?: string;
        };
    };
    responses: {
        /** @description Unauthorized */
        UnauthorizedError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Resource not found */
        NotFoundError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Request validation failed */
        ValidationError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Rate limit exceeded */
        TooManyRequestsError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Unexpected server error */
        InternalServerError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
    };
    parameters: {
        /** @description Chat session identifier (UUID string). */
        ChatIdParam: string;
        /** @description Tag identifier (UUID string). */
        TagIdParam: string;
    };
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    getAuthStartMetadata: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful retrieval of metadata. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthStartMetadata"];
                };
            };
            400: components["responses"]["ValidationError"];
            500: components["responses"]["InternalServerError"];
        };
    };
    exchangeAuthCode: {
        parameters: {
            query: {
                code: string;
                state: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Code exchange succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthTokens"];
                };
            };
            400: components["responses"]["ValidationError"];
            401: components["responses"]["UnauthorizedError"];
            500: components["responses"]["InternalServerError"];
        };
    };
    refreshTokens: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    refreshToken: string;
                    /** @description Device identifier previously associated with the refresh token. */
                    deviceId: string;
                };
            };
        };
        responses: {
            /** @description Token rotation succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthTokens"];
                };
            };
            400: components["responses"]["ValidationError"];
            401: components["responses"]["UnauthorizedError"];
            429: components["responses"]["TooManyRequestsError"];
            500: components["responses"]["InternalServerError"];
        };
    };
    getCurrentUser: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Authenticated user profile. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MeResponse"];
                };
            };
            401: components["responses"]["UnauthorizedError"];
            500: components["responses"]["InternalServerError"];
        };
    };
    listChats: {
        parameters: {
            query?: {
                /** @description Maximum number of items to return. */
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Chat list payload. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ChatListResponse"];
                };
            };
            401: components["responses"]["UnauthorizedError"];
            500: components["responses"]["InternalServerError"];
        };
    };
    createChat: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CreateChatRequest"];
            };
        };
        responses: {
            /** @description Chat session created. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ChatItem"];
                };
            };
            400: components["responses"]["ValidationError"];
            401: components["responses"]["UnauthorizedError"];
            500: components["responses"]["InternalServerError"];
        };
    };
    deleteChat: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Chat session identifier (UUID string). */
                id: components["parameters"]["ChatIdParam"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Chat deleted. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            401: components["responses"]["UnauthorizedError"];
            404: components["responses"]["NotFoundError"];
            500: components["responses"]["InternalServerError"];
        };
    };
    renameChat: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Chat session identifier (UUID string). */
                id: components["parameters"]["ChatIdParam"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateChatRequest"];
            };
        };
        responses: {
            /** @description Chat updated. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: components["responses"]["ValidationError"];
            401: components["responses"]["UnauthorizedError"];
            404: components["responses"]["NotFoundError"];
            500: components["responses"]["InternalServerError"];
        };
    };
    listChatMessages: {
        parameters: {
            query?: {
                /** @description Maximum number of messages to return. */
                limit?: number;
            };
            header?: never;
            path: {
                /** @description Chat session identifier (UUID string). */
                id: components["parameters"]["ChatIdParam"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Message list payload. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessagesResponse"];
                };
            };
            401: components["responses"]["UnauthorizedError"];
            404: components["responses"]["NotFoundError"];
            500: components["responses"]["InternalServerError"];
        };
    };
    listTagTypes: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Tag type list payload. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TagTypeListResponse"];
                };
            };
            401: components["responses"]["UnauthorizedError"];
            500: components["responses"]["InternalServerError"];
        };
    };
    listTags: {
        parameters: {
            query?: {
                subjectId?: string;
                topicId?: string;
                tagTypeId?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Tag list payload. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TagListResponse"];
                };
            };
            401: components["responses"]["UnauthorizedError"];
            500: components["responses"]["InternalServerError"];
        };
    };
    listChatTags: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Chat session identifier (UUID string). */
                id: components["parameters"]["ChatIdParam"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Chat tag list payload. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ChatTagListResponse"];
                };
            };
            401: components["responses"]["UnauthorizedError"];
            404: components["responses"]["NotFoundError"];
            500: components["responses"]["InternalServerError"];
        };
    };
    upsertChatTag: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Chat session identifier (UUID string). */
                id: components["parameters"]["ChatIdParam"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ChatTagUpsertRequest"];
            };
        };
        responses: {
            /** @description Tag attached. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: components["responses"]["ValidationError"];
            401: components["responses"]["UnauthorizedError"];
            404: components["responses"]["NotFoundError"];
            500: components["responses"]["InternalServerError"];
        };
    };
    removeChatTag: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Chat session identifier (UUID string). */
                id: components["parameters"]["ChatIdParam"];
                /** @description Tag identifier (UUID string). */
                tagId: components["parameters"]["TagIdParam"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Tag removed. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            401: components["responses"]["UnauthorizedError"];
            404: components["responses"]["NotFoundError"];
            500: components["responses"]["InternalServerError"];
        };
    };
    listTagMastery: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Tag mastery list payload. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TagMasteryListResponse"];
                };
            };
            401: components["responses"]["UnauthorizedError"];
            500: components["responses"]["InternalServerError"];
        };
    };
    updateTagMastery: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Tag identifier (UUID string). */
                tagId: components["parameters"]["TagIdParam"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TagMasteryUpdateRequest"];
            };
        };
        responses: {
            /** @description Updated mastery entry. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TagMasteryItem"];
                };
            };
            400: components["responses"]["ValidationError"];
            401: components["responses"]["UnauthorizedError"];
            404: components["responses"]["NotFoundError"];
            500: components["responses"]["InternalServerError"];
        };
    };
    runChatCompletion: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RunChatRequest"];
            };
        };
        responses: {
            /** @description LLM response payload. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ChatResult"];
                };
            };
            400: components["responses"]["ValidationError"];
            401: components["responses"]["UnauthorizedError"];
            429: components["responses"]["TooManyRequestsError"];
            500: components["responses"]["InternalServerError"];
        };
    };
    registerPushToken: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PushRegisterRequest"];
            };
        };
        responses: {
            /** @description Push token stored. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: components["responses"]["ValidationError"];
            401: components["responses"]["UnauthorizedError"];
            500: components["responses"]["InternalServerError"];
        };
    };
    verifyIapReceipt: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["IapVerifyRequest"];
            };
        };
        responses: {
            /** @description Receipt processed. Returned status reflects the canonical subscription state. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["IapVerifyResponse"];
                };
            };
            400: components["responses"]["ValidationError"];
            401: components["responses"]["UnauthorizedError"];
            /** @description Receipt rejected or stale. */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            500: components["responses"]["InternalServerError"];
        };
    };
}
