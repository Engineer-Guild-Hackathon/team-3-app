version: '3'

# 要件: 実行は全て Docker。ローカル起動は dev のみ。それ以外は build のみ。

tasks:
  default:
    desc: Show task list
    silent: true
    cmds:
      - echo "Available tasks:" && task --list-all

  # --- Dev (起動はローカルのみ/Compose使用) -------------------------------
  dev:
    desc: Run dev via Docker Compose (foreground)
    interactive: true
    cmds:
      - echo "Starting dev (Docker Compose)..."
      - "docker compose -f docker-compose.dev.yml up --build"
  
  dev:nuke:
    desc: Stop & remove containers + volumes (recreate node_modules)
    cmds:
      - echo "Nuking dev environment (containers + volumes)..."
      - "docker compose -f docker-compose.dev.yml down -v"
      - "docker compose -f docker-compose.dev.yml build --no-cache web"
      - "docker compose -f docker-compose.dev.yml up"

  dev:down:
    desc: Stop dev containers and remove orphans
    cmds:
      - echo "Stopping dev containers..."
      - docker compose -f docker-compose.dev.yml down --remove-orphans

  # --- Database (Docker Compose + Drizzle) ---------------------------------
  db:up:
    desc: Start Postgres(17) + web (detached)
    cmds:
      - echo "Starting db + web (detached)..."
      - docker compose -f docker-compose.dev.yml up -d --build

  db:down:
    desc: Stop db + web containers
    cmds:
      - echo "Stopping db + web..."
      - docker compose -f docker-compose.dev.yml down --remove-orphans

  db:ps:
    desc: Show compose services status
    cmds:
      - docker compose -f docker-compose.dev.yml ps -a

  db:logs:
    desc: Tail web/db logs (latest 100)
    cmds:
      - docker compose -f docker-compose.dev.yml logs --tail=100 web || true
      - docker compose -f docker-compose.dev.yml logs --tail=100 db || true

  db:migrate:
    desc: Run Drizzle migrations in web container
    cmds:
      - echo "Running migrations..."
      - docker compose -f docker-compose.dev.yml run --rm web sh -c 'npm run -s db:migrate'

  db:studio:
    desc: Open Drizzle Studio on localhost:4983
    cmds:
      - echo "Starting Drizzle Studio at http://localhost:4983" 
      - docker compose -f docker-compose.dev.yml run --rm -p 4983:4983 web sh -c 'npm run -s db:studio'

  db:check:
    desc: Quick checks (pgcrypto, tables, views)
    cmds:
      - echo "Check compose status" && docker compose -f docker-compose.dev.yml ps -a
      - echo "Check DATABASE_URL in web" && docker compose -f docker-compose.dev.yml run --rm web sh -c 'printenv DATABASE_URL || echo not-set'
      - echo "Check pgcrypto extension" && docker compose -f docker-compose.dev.yml exec db psql -U dev -d team3app_dev -c '\dx pgcrypto' || true
      - echo "Check tables" && docker compose -f docker-compose.dev.yml exec db psql -U dev -d team3app_dev -c '\dt' || true
      - echo "Check views" && docker compose -f docker-compose.dev.yml exec db psql -U dev -d team3app_dev -c '\dv' || true

  # --- Build only (Staging/Production) -------------------------------------
  build:stg:
    desc: Build staging image only (no run)
    cmds:
      - echo "Building staging image..."
      - docker compose -f docker-compose.stg.yml build

  build:prod:
    desc: Build production image only (no run)
    cmds:
      - echo "Building production image..."
      - docker compose -f docker-compose.prod.yml build

  build:all:
    desc: Build both staging and production images
    cmds:
      - task build:stg
      - task build:prod

  # --- Local CI pre-check (Docker, Node image) ----------------------------
  ci:local:
    desc: Run local CI (npm ci → typecheck → optional lint/test → build)
    # ローカルの権限問題を避けるため、Docker の Node イメージで実行する
    cmds:
      - echo "Running local CI pre-check..."
      # 1) .next を常にクリーン（権限差異による EACCES を確実に回避）
      - |
        if [ -d .next ]; then
          echo "Resetting .next cache..."
          docker run --rm \
            -v ${PWD}:/app \
            -w /app \
            node:22 \
            bash -lc 'rm -rf .next'
        fi
      # 2) CI 本体（ホストと同一 UID/GID で実行し、権限問題を回避）
      - mkdir -p .cache/npm
      - |
        docker run --rm \
          -u $(id -u):$(id -g) \
          -v ${PWD}:/app \
          -v ${PWD}/.cache/npm:/cache/npm \
          -w /app \
          -e NEXT_TELEMETRY_DISABLED=1 \
          -e NPM_CONFIG_CACHE=/cache/npm \
          -e NPM_CONFIG_FUND=false \
          -e NPM_CONFIG_AUDIT=false \
          -e NPM_CONFIG_PROGRESS=false \
          -e CI=1 \
          node:22 \
          bash -lc '
            set -euo pipefail
            echo "Step: npm ci"
            npm ci --no-audit --no-fund
            echo "Step: detect scripts"
            if node -e "const s=(require(\"./package.json\").scripts)||{}; process.exit(Object.prototype.hasOwnProperty.call(s,\"lint\")?0:1)"; then lint=1; else lint=0; fi
            if node -e "const s=(require(\"./package.json\").scripts)||{}; process.exit(Object.prototype.hasOwnProperty.call(s,\"typecheck\")?0:1)"; then typecheck=1; else typecheck=0; fi
            if node -e "const s=(require(\"./package.json\").scripts)||{}; process.exit(Object.prototype.hasOwnProperty.call(s,\"test\")?0:1)"; then test=1; else test=0; fi
            if [ "${lint:-0}" = "1" ]; then
              echo "Step: npm run lint"
              npm run -s lint
            else
              echo "Skip: lint (not defined)"
            fi
            if [ "${typecheck:-0}" = "1" ]; then
              echo "Step: npm run typecheck"
              npm run -s typecheck
            else
              echo "Skip: typecheck (not defined)"
            fi
            if [ "${test:-0}" = "1" ]; then
              echo "Step: npm test"
              npm test --silent
            else
              echo "Skip: test (not defined)"
            fi
            echo "Step: npm run build"
            npm run -s build
          '

  # さらに高速化（型チェックを Next.js の build に委譲）
  ci:local:fast:
    desc: Run local CI fast (cache npm, skip standalone typecheck)
    cmds:
      - echo "Running local CI fast..."
      - |
        if [ -d .next ]; then
          echo "Resetting .next cache..."
          docker run --rm -v ${PWD}:/app -w /app node:22 bash -lc 'rm -rf .next'
        fi
      - mkdir -p .cache/npm
      - |
        docker run --rm \
          -u $(id -u):$(id -g) \
          -v ${PWD}:/app \
          -v ${PWD}/.cache/npm:/cache/npm \
          -w /app \
          -e NEXT_TELEMETRY_DISABLED=1 \
          -e NPM_CONFIG_CACHE=/cache/npm \
          -e NPM_CONFIG_FUND=false \
          -e NPM_CONFIG_AUDIT=false \
          -e NPM_CONFIG_PROGRESS=false \
          -e CI=1 \
          node:22 \
          bash -lc '
            set -euo pipefail
            echo "Step: npm install (fast)"
            npm install --no-audit --no-fund
            echo "Step: detect scripts"
            if node -e "const s=(require(\"./package.json\").scripts)||{}; process.exit(Object.prototype.hasOwnProperty.call(s,\"lint\")?0:1)"; then lint=1; else lint=0; fi
            if node -e "const s=(require(\"./package.json\").scripts)||{}; process.exit(Object.prototype.hasOwnProperty.call(s,\"test\")?0:1)"; then test=1; else test=0; fi
            if [ "${lint:-0}" = "1" ]; then
              echo "Step: npm run lint"
              npm run -s lint
            else
              echo "Skip: lint (not defined)"
            fi
            if [ "${test:-0}" = "1" ]; then
              echo "Step: npm test"
              npm test --silent
            else
              echo "Skip: test (not defined)"
            fi
            echo "Step: npm run build (includes TS check)"
            npm run -s build
          '
